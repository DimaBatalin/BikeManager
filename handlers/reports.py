from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
import services.storage as storage
from utils.keyboard import main_reply_kb, report_options_inline_kb

router = Router()


def register_handlers(dp):
    dp.include_router(router)


@router.message(F.text == "–û—Ç—á—ë—Ç—ã")
async def show_report_options(message: Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–ø—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á—ë—Ç–∞.
    """
    await state.set_state(state=None)
    await message.answer(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ, –∑–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç:",
        reply_markup=report_options_inline_kb(),
    )


@router.callback_query(F.data.startswith("report_type:"))
async def generate_report(callback: CallbackQuery):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á—ë—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É –ø–µ—Ä–∏–æ–¥–∞ —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    """
    if not callback.data:
        await callback.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã.", show_alert=True)
        return

    period_type = callback.data.split(":")[1]

    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á—ë—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    await callback.answer()

    if period_type == "week":
        num_periods = 4
        title = "–û—Ç—á—ë—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –Ω–µ–¥–µ–ª–∏"
    elif period_type == "month":
        num_periods = 12
        title = "–û—Ç—á—ë—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤"
    else:
        await callback.message.answer(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç—á—ë—Ç–∞.", reply_markup=main_reply_kb()
        )
        return

    reports_data = storage.get_reports_data(period_type, num_periods)

    if not reports_data:
        await callback.message.answer(
            f"üö´ –ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞.",
            reply_markup=main_reply_kb(),
        )
        return

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á—ë—Ç–∞
    response_messages = [f"‚ú® <b>{title}</b> ‚ú®\n\n"]

    for report in reports_data:
        if period_type == "week":
            period_display = f"—Å {report['start_date']} –ø–æ {report['end_date']}"
        else: 
            period_display = report["period_name"]

        message_part = (
            f"--- <b>{period_display}</b> ---\n"
            f"  üõ†Ô∏è <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–º–æ–Ω—Ç–æ–≤:</b> <code>{report['bike_count']}</code>\n"
            f"  üí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> <code>{report['total_cost']} —Ä—É–±.</code>\n\n"
        )
        response_messages.append(message_part)

    # –°–±–æ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, —É—á–∏—Ç—ã–≤–∞—è –ª–∏–º–∏—Ç Telegram
    current_message_batch = ""
    for part in response_messages:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏ –ª–∏–º–∏—Ç –≤ 4096 —Å–∏–º–≤–æ–ª–æ–≤
        if (
            len(current_message_batch) + len(part) > 4000
        ):  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —á—É—Ç—å –º–µ–Ω—å—à–∏–π –ª–∏–º–∏—Ç –¥–ª—è –∑–∞–ø–∞—Å–∞
            await callback.message.answer(
                current_message_batch, reply_markup=main_reply_kb()
            )
            current_message_batch = part  # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –ø–æ—Ä—Ü–∏—é
        else:
            current_message_batch += part

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    if current_message_batch:
        await callback.message.answer(
            current_message_batch, reply_markup=main_reply_kb()
        )

