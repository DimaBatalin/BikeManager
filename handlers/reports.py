from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
import services.storage as storage
from utils.keyboard import (
    main_reply_kb,
    report_options_inline_kb,
)
from fsm_states import ReportState

router = Router()


def register_handlers(dp):
    dp.include_router(router)



@router.callback_query(F.data.startswith("report_filter:"))
async def handle_report_source_filter(callback: CallbackQuery, state: FSMContext):
    source_filter = callback.data.split(":")[1]
    await state.set_state(ReportState.waiting_for_period)
    await state.update_data(source_filter=source_filter)
    await callback.message.edit_text(
        "üóìÔ∏è –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç—á—ë—Ç–∞:",
        reply_markup=report_options_inline_kb(),
    )
    await callback.answer()


@router.callback_query(
    F.data.startswith("report_type:"), ReportState.waiting_for_period
)
async def generate_report(callback: CallbackQuery, state: FSMContext):
    if not callback.data:
        await callback.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    fsm_data = await state.get_data()
    source_filter = fsm_data.get("source_filter", "all")
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    period_type = callback.data.split(":")[1]
    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á—ë—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    if period_type == "week":
        num_periods = 4
        title = "–û—Ç—á—ë—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –Ω–µ–¥–µ–ª–∏"
    elif period_type == "month":
        num_periods = 12
        title = "–û—Ç—á—ë—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤"
    else:
        await callback.message.answer(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç—á—ë—Ç–∞.", reply_markup=main_reply_kb()
        )
        return

    # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –≤ —Ñ—É–Ω–∫—Ü–∏—é
    reports_data = storage.get_reports_data(period_type, num_periods, source_filter)

    if not reports_data or all(report["bike_count"] == 0 for report in reports_data):
        await callback.message.edit_text(
            f"üö´ –í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.",
        )
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞
    from utils.keyboard import REPAIR_SOURCES  # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è

    filter_name = REPAIR_SOURCES.get(source_filter, "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    full_title = f"‚ú® <b>{title}</b>\n(–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{filter_name}</b>) ‚ú®\n\n"
    response_messages = [full_title]

    for report in reports_data:
        if report["bike_count"] == 0:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –ø–µ—Ä–∏–æ–¥—ã

        if period_type == "week":
            period_display = f"—Å {report['start_date']} –ø–æ {report['end_date']}"
        else:
            period_display = report["period_name"]

        message_part = (
            f"--- <b>{period_display}</b> ---\n"
            f"  üõ†Ô∏è <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–º–æ–Ω—Ç–æ–≤:</b> <code>{report['bike_count']}</code>\n"
            f"  üí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> <code>{report['total_cost']} —Ä—É–±.</code>\n\n"
        )
        response_messages.append(message_part)

    current_message_batch = ""
    for part in response_messages:
        if len(current_message_batch) + len(part) > 4000:
            await callback.message.answer(
                current_message_batch, reply_markup=main_reply_kb()
            )
            current_message_batch = part
        else:
            current_message_batch += part

    if current_message_batch:
        if callback.message.text.startswith("‚è≥"):
            await callback.message.edit_text(current_message_batch)
        else:
            await callback.message.answer(
                current_message_batch, reply_markup=main_reply_kb()
            )
