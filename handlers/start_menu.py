from aiogram import Router, F, types
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from aiogram.fsm.context import FSMContext
import services.storage as storage
from utils.keyboard import (
    main_reply_kb,
    source_filter_inline_kb,
    active_repairs_inline,
)
from fsm_states import RepairForm

router = Router()


def register_handlers(dp):
    dp.include_router(router)


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.set_state(state=None)
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Mexan! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=main_reply_kb()
    )


@router.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–º–æ–Ω—Ç")
@router.message(Command("add_repair"))
@router.callback_query(F.data == "new_repair")
@router.callback_query(F.data == "new_repair_from_empty")
async def start_add_repair(
    update: types.Union[Message, CallbackQuery], state: FSMContext
):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –§–ò–û."""
    if isinstance(update, Message):
        await update.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞:")
    elif isinstance(update, CallbackQuery):
        await update.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞:")
        await update.answer()

    await state.set_state(RepairForm.fio)


@router.message(F.text == "–ê—Ä—Ö–∏–≤")
async def show_archive_filter(message: Message, state: FSMContext):
    """–°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä, –ø–æ—Ç–æ–º –∞—Ä—Ö–∏–≤."""
    await state.clear()
    await message.answer(
        "üóÇÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Ä—Ö–∏–≤–∞:",
        reply_markup=source_filter_inline_kb(prefix="archive_filter"),
    )


@router.message(F.text == "–û—Ç—á—ë—Ç—ã")
async def show_report_source_filter(message: Message, state: FSMContext):
    """
    –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É.
    """
    await state.clear()
    await message.answer(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞:",
        reply_markup=source_filter_inline_kb(prefix="report_filter"),
    )


@router.message(F.text == "–î–µ–π—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–º–æ–Ω—Ç—ã")
@router.message(Command("active_repairs"))
async def show_active_repairs_list(message: Message, state: FSMContext):
    await state.set_state(state=None)
    active_repairs = storage.get_active_repairs()
    if not active_repairs:
        # –ï—Å–ª–∏ —Ä–µ–º–æ–Ω—Ç–æ–≤ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ä–∞–∑—É
        await message.answer(
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ–º–æ–Ω—Ç–æ–≤. –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π?",
            reply_markup=active_repairs_inline(),
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –§–ò–û
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π —Ä–µ–º–æ–Ω—Ç–∞:",
        reply_markup=active_repairs_inline(active_repairs),
    )
