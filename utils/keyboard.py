from aiogram.types import (
    KeyboardButton,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from utils.formatter import (
    format_name,
)
from services import (
    storage,
)
from config import ELECTRIC_BIKE_BREAKDOWNS_PATH, REPAIR_SOURCES

from re import search

def main_reply_kb() -> ReplyKeyboardMarkup:
    buttons = [
        [
            KeyboardButton(text="–î–µ–π—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–º–æ–Ω—Ç—ã"),
            KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–º–æ–Ω—Ç"),
        ],
        [
            KeyboardButton(text="–ê—Ä—Ö–∏–≤"),
            KeyboardButton(text="–û—Ç—á—ë—Ç—ã"),
        ],
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


def select_repair_source_inline() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞/—Ç–∏–ø–∞ —Ä–µ–º–æ–Ω—Ç–∞.
    """
    buttons = []
    for key, value in REPAIR_SOURCES.items():
        buttons.append(
            [InlineKeyboardButton(text=value, callback_data=f"set_source:{key}")]
        )
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def source_filter_inline_kb(prefix: str) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É –≤ –∞—Ä—Ö–∏–≤–µ –∏ –æ—Ç—á–µ—Ç–∞—Ö.
    `prefix` –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'archive_filter' –∏–ª–∏ 'report_filter'.
    """
    buttons = [
        [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", callback_data=f"{prefix}:all")]
    ]
    for key, value in REPAIR_SOURCES.items():
        buttons.append(
            [InlineKeyboardButton(text=value, callback_data=f"{prefix}:{key}")]
        )

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def active_repairs_inline(active_list: list = []) -> InlineKeyboardMarkup:
    keyboard = []
    for r in active_list:
        fio = format_name(r.get("FIO", "–ë–µ–∑ –∏–º–µ–Ω–∏"))
        rid = r.get("id")
        if rid is not None:
            keyboard.append(
                [
                    InlineKeyboardButton(
                        text=fio, callback_data=f"show_active_repair_details:{rid}"
                    )
                ]
            )
    if active_list:
        return InlineKeyboardMarkup(inline_keyboard=keyboard)

    keyboard.append(
        [
            InlineKeyboardButton(
                text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ–º–æ–Ω—Ç", callback_data="new_repair"
            )
        ]
    )
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def detail_repair_inline(repair_id: str | int) -> InlineKeyboardMarkup:
    str_repair_id = str(repair_id)
    keyboard = [
        [
            InlineKeyboardButton(
                text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_repair:{str_repair_id}"
            ),
            InlineKeyboardButton(
                text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"close_repair:{str_repair_id}"
            ),
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def e_bike_problems_inline(selected_problems: list = []) -> InlineKeyboardMarkup:
    problems = ELECTRIC_BIKE_BREAKDOWNS_PATH
    buttons = []

    base_selected = set()
    for bd in selected_problems:
        base = bd.rsplit(" ", 1)[0] if search(r"\s+\d+$", bd) else bd
        base_selected.add(base)

    for problem in problems:
        is_selected = problem in base_selected
        button_text = f"{'‚úÖ' if is_selected else '‚¨ú'} {problem}"
        callback_data = f"add_e_bike_problem:{problem}"
        buttons.append(
            [InlineKeyboardButton(text=button_text, callback_data=callback_data)]
        )

    buttons.append(
        [
            InlineKeyboardButton(
                text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ –ø–æ–ª–æ–º–∫–∏", callback_data="input_custom_breakdowns"
            )
        ]
    )
    buttons.append(
        [
            InlineKeyboardButton(
                text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="finish_breakdowns_selection"
            )
        ]
    )
    return InlineKeyboardMarkup(inline_keyboard=buttons)




def edit_repair_options_inline(repair_id: int) -> InlineKeyboardMarkup:
    """
    –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–º–æ–Ω—Ç–∞.
    """
    buttons = [
        [
            InlineKeyboardButton(text="–§–ò–û", callback_data=f"field:FIO:{repair_id}"),
            InlineKeyboardButton(
                text="–ö–æ–Ω—Ç–∞–∫—Ç", callback_data=f"field:contact:{repair_id}"
            ),
        ],
        [
            InlineKeyboardButton(
                text="–ò—Å—Ç–æ—á–Ω–∏–∫", callback_data=f"field:repair_type:{repair_id}"
            ),
        ],
        [
            InlineKeyboardButton(
                text="–¢–∏–ø –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞", callback_data=f"field:isMechanics:{repair_id}"
            ),
            InlineKeyboardButton(
                text="–ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞", callback_data=f"field:namebike:{repair_id}"
            ),
        ],
        [
            InlineKeyboardButton(
                text="–ü–æ–ª–æ–º–∫–∏", callback_data=f"field:breakdowns:{repair_id}"
            ),
            InlineKeyboardButton(
                text="–°—Ç–æ–∏–º–æ—Å—Ç—å", callback_data=f"field:cost:{repair_id}"
            ),
        ],
        [
            InlineKeyboardButton(
                text="–ü—Ä–∏–º–µ—á–∞–Ω–∏—è", callback_data=f"field:notes:{repair_id}"
            ),
            InlineKeyboardButton(text="–î–∞—Ç–∞", callback_data=f"field:date:{repair_id}"),
        ],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit:{repair_id}")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def select_bike_type_inline() -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π –≤–µ–ª–æ—Å–∏–ø–µ–¥",
                    callback_data="set_bike_type:mechanics",
                )
            ],
            [
                InlineKeyboardButton(
                    text="–≠–ª–µ–∫—Ç—Ä–æ–≤–µ–ª–æ—Å–∏–ø–µ–¥", callback_data="set_bike_type:electric"
                )
            ],
        ]
    )
    return keyboard


def edit_bike_type_inline(repair_id: int) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞.
    ID —Ä–µ–º–æ–Ω—Ç–∞ (repair_id) –∑–¥–µ—Å—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ callback_data,
    —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM, –Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è.
    """
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–π –≤–µ–ª–æ—Å–∏–ø–µ–¥",
                    callback_data="set_bike_type:mechanics",
                )
            ],
            [
                InlineKeyboardButton(
                    text="–≠–ª–µ–∫—Ç—Ä–æ–≤–µ–ª–æ—Å–∏–ø–µ–¥", callback_data="set_bike_type:electric"
                )
            ],
        ]
    )
    return keyboard


def skip_notes_inline_kb() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="–ë–µ–∑ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π", callback_data="skip_notes")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def archive_repair_inline(repair_id: int) -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(
                text="‚ôªÔ∏è –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"restore_repair:{repair_id}"
            ),
        ],
        [
            InlineKeyboardButton(
                text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", callback_data=f"edit_archive_date:{repair_id}"
            ),
            InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞", callback_data=f"delete_repair:{repair_id}"
            ),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def report_options_inline_kb() -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(text="–ü–æ –Ω–µ–¥–µ–ª—è–º", callback_data="report_type:week"),
            InlineKeyboardButton(text="–ü–æ –º–µ—Å—è—Ü—è–º", callback_data="report_type:month"),
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def confirm_total_cost_kb(suggested_cost: int) -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(
                text=f"‚úÖ –ü—Ä–∏–Ω—è—Ç—å {suggested_cost} —Ä—É–±.",
                callback_data=f"confirm_cost:{suggested_cost}",
            ),
        ],
        [
            InlineKeyboardButton(
                text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é —Å—É–º–º—É", callback_data="enter_custom_cost"
            )
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def archive_pagination_kb(
    page: int, total_pages: int, repair_id: int
) -> InlineKeyboardMarkup:
    buttons = [[]]
    if page > 0:
        buttons[0].append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"archive_page:{page-1}")
        )
    buttons[0].append(
        InlineKeyboardButton(text=f"{page+1}/{total_pages}", callback_data="ignore")
    )
    if page < total_pages - 1:
        buttons[0].append(
            InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"archive_page:{page+1}"
            )
        )
    buttons.extend(archive_repair_inline(repair_id).inline_keyboard)
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def edit_repair_type_keyboard(repair_id):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    buttons = []
    for key, name in storage.get_repair_sources().items():
        buttons.append(
            InlineKeyboardButton(
                text=name, callback_data=f"set_repair_source:{key}:{repair_id}"
            )
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    buttons.append(
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit:{repair_id}")
    )

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    return InlineKeyboardMarkup(
        inline_keyboard=[buttons[i : i + 2] for i in range(0, len(buttons), 2)]
    )
